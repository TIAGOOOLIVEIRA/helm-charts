---
apiVersion: v1
kind: Namespace
metadata:
  name: lightbend

---
apiVersion: batch/v1
kind: Job
metadata:
  name: loadrules
  namespace: lightbend
spec:
  template:
    spec:
      containers:
      - name: loadrules
        image: lightbend-docker-registry.bintray.io/enterprise-suite/loadrules:v1
      restartPolicy: Never

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server
  namespace: lightbend
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: lightbend

---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: prometheus
    component: server
  name: prometheus-server
  namespace: lightbend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      component: server
  template:
    metadata:
      labels:
        app: prometheus
        component: server
    spec:
      serviceAccountName: prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.1"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:9090/-/reload
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
        - name: prometheus-server
          image: "lightbend-docker-registry.bintray.io/enterprise-suite/es-prometheus:latest"
          # image: "prom/prometheus:v2.2.1"
          imagePullPolicy: "Always"
          args:
            - --config.file=/etc/config/prometheus.yml
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /status
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-server

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
    component: "server"
  name: prometheus-server
  namespace: lightbend
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app: prometheus
    component: "server"
  type: "ClusterIP"

---
apiVersion: v1
kind: Service
metadata:
  name: expose-prometheus
  namespace: lightbend
spec:
  ports:
  - port: 9090
    protocol: TCP
    targetPort: 9090
    nodePort: 30090
  selector:
    app: prometheus
    component: server
  type: NodePort

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    component: "server"
  name: prometheus-server
  namespace: lightbend
data:
  prometheus.yml: |-
    global:
      # dev mode
      scrape_interval: 10s
      evaluation_interval: 10s

    rule_files:
      - /etc/config/rules

    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace,__meta_kubernetes_pod_label_app,__meta_kubernetes_pod_label_component,__meta_kubernetes_pod_container_port_number]
          regex: lightbend;prometheus;alertmanager;[0-9]+
          action: keep

    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090

      # This uses separate scrape configs for cluster components (i.e. API server, node)
      # and services to allow each to use different authentication configs.
      #
      # Kubernetes labels will be added as Prometheus labels on metrics via the
      # `labelmap` relabeling action.

      - job_name: 'kubernetes-node-containers'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
          - source_labels: [__meta_kubernetes_node_name]
            target_label: node_name
          - source_labels: [__meta_kubernetes_node_address_InternalIP]
            target_label: node_ip

        metric_relabel_configs:
          - source_labels: [pod_name]
            target_label: kubernetes_pod_name
          - regex: pod_name
            action: labeldrop
          # pause containers have all the network stats for a pod
          - source_labels: [container_name, __name__]
            regex: POD;container_(network).*
            target_label: container_name
          # drop all other pause container stats
          - source_labels: [container_name]
            regex: POD
            action: drop
          # drop system containers with no name
          - source_labels: [container_name]
            regex: ^$
            action: drop
          # drop high cardinality debug metrics
          - source_labels: [__name__]
            regex: container_(network_tcp_usage_total|tasks_state|cpu_usage_seconds_total|memory_failures_total|network_udp_usage_total)
            action: drop

      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: (.+)(?::\d+);(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip

        # workload labels:
        metric_relabel_configs:
          - source_labels: [created_by_kind, pod]
            regex: 'ReplicaSet;(.*)-[^-]+-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'StatefulSet;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'DaemonSet;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'Job;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: 'ReplicationController;(.*)-[^-]+'
            target_label: workload
          - source_labels: [created_by_kind, pod]
            regex: '.none.;(.*)'
            target_label: workload

      - job_name: 'prometheus-pushgateway'
        honor_labels: true

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: pushgateway

      # Scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
      - job_name: 'kubernetes-services'

        metrics_path: /probe
        params:
          module: [http_2xx]

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      # Scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
          - role: pod

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+):(?:\d+);(\d+)
            replacement: ${1}:${2}
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_host_ip]
            action: replace
            target_label: node_ip
          - source_labels: [__meta_kubernetes_pod_label_pod_template_hash, __meta_kubernetes_pod_name]
            action: replace
            regex: '[^;]+;(.*)-[^-]+-[^-]+'
            target_label: workload
          - source_labels: [__meta_kubernetes_pod_label_statefulset_kubernetes_io_pod_name]
            action: replace
            regex: (.*)-[0-9]+
            target_label: workload


  # record and alert rules
  # within a group, rules are evaluated on the group interval and in order
  # groups are evaluated in parallel
  rules: |-
    groups:
    - name: lightbend_rules
      rules:
      - record: node_cpu_percent
        expr: 100 - avg by (instance) (irate(node_cpu{mode="idle"}[5m]) * 100)

      - record: node_memory_usable_percent
        expr: avg by (instance) (node_memory_MemAvailable / node_memory_MemTotal) * 100

      - record: node_filesystem_free_percent
        expr: avg by (device, instance) ((node_filesystem_free{device=~"/.*"} / node_filesystem_size * 100) and (node_filesystem_size > 0))

      - record: node_network_errors
        expr: sum by(instance) (node_network_transmit_errs + node_network_receive_errs + node_network_receive_drop + node_network_transmit_drop)

      - record: kube_node_pressure
        expr: avg by (condition, node_ip, node_name) (kube_node_status_condition{condition!="Ready", status="true"})

      - record: kube_pod_ready
        expr: avg by (node_ip, node_name, namespace, pod) (kube_pod_status_ready{condition="true"}) * on (pod) group_left(workload) kube_pod_info

      - record: akka_processing_time_seconds
        expr: akka_actor_processing_time_ns{quantile="0.5"} / 1000000000

      - record: kube_pod_container_restarts
        expr: irate(kube_pod_container_status_restarts_total[1m]) * on (pod) group_left(workload) kube_pod_info

      - record: kube_pod_failed
        expr: kube_pod_status_phase{phase="Failed"} * on (pod) group_left(workload) kube_pod_info

      - record: kube_pod_not_running
        expr: kube_pod_status_phase{phase=~"Pending|Unknown"} * on (pod) group_left(workload) kube_pod_info

      - record: kube_workload_generation_lag
        expr: avg by (workload, namespace) (label_replace(kube_deployment_metadata_generation - kube_deployment_status_observed_generation, "workload", "$1", "deployment", "(.+)"))

      - record: kube_workload_generation_lag
        expr: avg by (workload, namespace) (label_replace(kube_daemonset_status_desired_number_scheduled - kube_daemonset_status_number_ready, "workload", "$1", "daemonset", "(.+)"))

      - record: prometheus_notification_queue_percent
        expr: 100 * prometheus_notifications_queue_length / prometheus_notifications_queue_capacity

      - record: prometheus_target_sync_percent
        expr: 100 * prometheus_target_sync_length_seconds{quantile="0.99"} / on (job,instance) group_left(interval) prometheus_target_interval_length_seconds{quantile="0.01"}

      - record: prometheus_notifications_dropped
        expr: rate(prometheus_notifications_dropped_total[10m])

      - record: prometheus_rule_evaluation_failures
        expr: rate(prometheus_rule_evaluation_failures_total[10m])

      - record: prometheus_target_scrapes_exceeded_sample_limit
        expr: rate(prometheus_target_scrapes_exceeded_sample_limit_total[10m])

      - record: prometheus_tsdb_reloads_failures
        expr: rate(prometheus_tsdb_reloads_failures_total[10m])

      - record: model
        expr: node_cpu_percent{monitor_type=""} >= bool 99
        labels:
          name: node_high_cpu
          threshold: 99
      - record: health
        expr: (avg_over_time(model{name="node_high_cpu",monitor_type=""}[2m]) >=bool 1.0) * 2
        labels:
          severity: warning
          window: 2m
      - alert: node_high_cpu
        expr: health{name="node_high_cpu",monitor_type=""} > 0
        annotations:
          summary: "cpu saturated"
          description: "cpu on {{$labels.instance}} over 99% busy"
      - record: model
        expr: node_memory_usable_percent{monitor_type=""} < bool 5
        labels:
          name: node_memory_pressure
          threshold: 5
      - record: health
        expr: (avg_over_time(model{name="node_memory_pressure",monitor_type=""}[5m]) >=bool 1) * 2
        labels:
          severity: warning
          window: 5m
      - alert: node_memory_pressure
        expr: health{name="node_memory_pressure",monitor_type=""} > 0
        annotations:
          summary: "memory pressure"
          description: "{{$labels.instance}} has low usable memory"
      - record: model
        expr: predict_linear(node_filesystem_free_percent{monitor_type=""}[1h], 28800)  < bool 0
        labels:
          name: node_disk_filling
          prediction: 8h
          period: 1h
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="node_disk_filling",monitor_type=""}[15m]) >=bool 1) * 2
        labels:
          severity: warning
          window: 15m
      - alert: node_disk_filling
        expr: health{name="node_disk_filling",monitor_type=""} > 0
        annotations:
          summary: "disk filling"
          description: "{{$labels.instance}} will fill disk in {{$labels.prediction}}"
      - record: model
        expr: node_network_errors{monitor_type=""} > bool 0
        labels:
          name: node_network_errors
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="node_network_errors",monitor_type=""}[5m]) >=bool 0.3) * 2
        labels:
          severity: warning
          window: 5m
      - alert: node_network_errors
        expr: health{name="node_network_errors",monitor_type=""} > 0
        annotations:
          summary: "network errors"
          description: "{{$labels.instance}} has network errors"
      - record: model
        expr: kube_node_pressure{monitor_type=""} > bool 0
        labels:
          name: kube_node_pressure
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="kube_node_pressure",monitor_type=""}[5m]) >=bool 0.5) * 2
        labels:
          severity: warning
          window: 5m
      - alert: kube_node_pressure
        expr: health{name="kube_node_pressure",monitor_type=""} > 0
        annotations:
          summary: "kube node pressure"
          description: "{{$labels.node_name}} is in kubernetes condition {{$labels.condition}}"
      - record: model
        expr: kube_pod_container_restarts{monitor_type=""} > bool 0
        labels:
          name: restarts
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="restarts",monitor_type=""}[10m]) >=bool 0.3) * 2
        labels:
          severity: warning
          window: 10m
      - alert: restarts
        expr: health{name="restarts",monitor_type=""} > 0
        annotations:
          summary: "container restarting rapidly"
          description: "container {{$labels.container}} in pod {{$labels.pod}} of {{$labels.workload}} restarting rapidly"
      - record: model
        expr: kube_pod_failed{monitor_type=""} > bool 0
        labels:
          name: kube_pod_failed
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="kube_pod_failed",monitor_type=""}[5m]) >=bool 0.5) * 4
        labels:
          severity: critical
          window: 5m
      - alert: kube_pod_failed
        expr: health{name="kube_pod_failed",monitor_type=""} > 0
        annotations:
          summary: "pod failed"
          description: "pod {{$labels.pod}} on {{$labels.workload}} failed"
      - record: model
        expr: kube_pod_not_running{monitor_type=""} > bool 0
        labels:
          name: kube_pod_not_running
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="kube_pod_not_running",monitor_type=""}[10m]) >=bool 0.8) * 2
        labels:
          severity: warning
          window: 10m
      - alert: kube_pod_not_running
        expr: health{name="kube_pod_not_running",monitor_type=""} > 0
        annotations:
          summary: "pod not running"
          description: "pod {{$labels.pod}} on {{$labels.workload}} not running"
      - record: model
        expr: kube_workload_generation_lag{monitor_type=""} > bool 0
        labels:
          name: kube_workload_generation_lag
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="kube_workload_generation_lag",monitor_type=""}[10m]) >=bool 1) * 2
        labels:
          severity: warning
          window: 10m
      - alert: kube_workload_generation_lag
        expr: health{name="kube_workload_generation_lag",monitor_type=""} > 0
        annotations:
          summary: "workload not updating"
          description: "workload {{$labels.workload}} has not updated for 10 minutes"
      - record: model
        expr: deriv(kafka_consumergroup_lag{monitor_type=""}[15m]) >bool 1
        labels:
          name: kafka_consumergroup_lag
          period: 15m
          minslope: 1
      - record: health
        expr: (avg_over_time(model{name="kafka_consumergroup_lag",monitor_type=""}[5m]) >=bool 1) * 2
        labels:
          severity: warning
          window: 5m
      - alert: kafka_consumergroup_lag
        expr: health{name="kafka_consumergroup_lag",monitor_type=""} > 0
        annotations:
          summary: "consumergroup falling behind"
          description: "{{$labels.consumergroup}} is falling behind"
      - record: model
        expr: abs(scrape_duration_seconds{monitor_type=""} - avg_over_time(scrape_duration_seconds[15m])) >bool 3 * clamp_min(stddev_over_time(scrape_duration_seconds[15m]),3)
        labels:
          name: scrape_time
          period: 15m
          sigma: 3
      - record: health
        expr: (avg_over_time(model{name="scrape_time",monitor_type=""}[15m]) >=bool 0.5) * 2
        labels:
          severity: warning
          window: 15m
      - alert: scrape_time
        expr: health{name="scrape_time",monitor_type=""} > 0
        annotations:
          summary: "scrape time anomalous"
          description: "{{$labels.instance}} has anomalous scrape_duration_seconds"
      - record: model
        expr: deriv(akka_actor_mailbox_size{quantile="0.5",monitor_type=""}[15m]) >bool 0.1
        labels:
          name: akka_inbox_growth
          period: 15m
          minslope: 0.1
      - record: health
        expr: (avg_over_time(model{name="akka_inbox_growth",monitor_type=""}[5m]) >=bool 1) * 4
        labels:
          severity: critical
          window: 5m
      - alert: akka_inbox_growth
        expr: health{name="akka_inbox_growth",monitor_type=""} > 0
        annotations:
          summary: "actor inbox growing"
          description: "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has a growing inbox"
      - record: model
        expr: abs(akka_actor_processing_time_ns{quantile="0.5",monitor_type=""} - avg_over_time(akka_actor_processing_time_ns{quantile="0.5"}[15m])) >bool 2 * clamp_min(stddev_over_time(akka_actor_processing_time_ns{quantile="0.5"}[15m]),10)
        labels:
          name: akka_processing_time
          period: 15m
          sigma: 2
      - record: health
        expr: (avg_over_time(model{name="akka_processing_time",monitor_type=""}[15m]) >=bool 0.5) * 2
        labels:
          severity: warning
          window: 15m
      - alert: akka_processing_time
        expr: health{name="akka_processing_time",monitor_type=""} > 0
        annotations:
          summary: "actor processing time is weird"
          description: "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has unusual processing time"
      - record: model
        expr: prometheus_notifications_dropped{monitor_type=""} > bool 0
        labels:
          name: prometheus_notifications_dropped
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="prometheus_notifications_dropped",monitor_type=""}[10m]) >=bool 0.1) * 2
        labels:
          severity: warning
          window: 10m
      - alert: prometheus_notifications_dropped
        expr: health{name="prometheus_notifications_dropped",monitor_type=""} > 0
        annotations:
          summary: "Prometheus dropping notifications"
          description: "Prometheus dropping alerts sent to Alertmanager"
      - record: model
        expr: prometheus_notification_queue_percent{monitor_type=""} > bool 50
        labels:
          name: prometheus_notification_queue
          threshold: 50
      - record: health
        expr: (avg_over_time(model{name="prometheus_notification_queue",monitor_type=""}[10m]) >=bool 0.5) * 2
        labels:
          severity: warning
          window: 10m
      - alert: prometheus_notification_queue
        expr: health{name="prometheus_notification_queue",monitor_type=""} > 0
        annotations:
          summary: "Prometheus alert queue filling"
          description: "Prometheus alert queue is staying over 50% full"
      - record: model
        expr: prometheus_rule_evaluation_failures{monitor_type=""} > bool 0
        labels:
          name: prometheus_rule_evaluation_failures
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="prometheus_rule_evaluation_failures",monitor_type=""}[10m]) >=bool 1) * 2
        labels:
          severity: warning
          window: 10m
      - alert: prometheus_rule_evaluation_failures
        expr: health{name="prometheus_rule_evaluation_failures",monitor_type=""} > 0
        annotations:
          summary: "Prometheus rule failures"
          description: "Prometheus has {{$value}} rules failing"
      - record: model
        expr: prometheus_target_scrapes_exceeded_sample_limit{monitor_type=""} > bool 0
        labels:
          name: prometheus_target_too_many_metrics
          threshold: 0
      - record: health
        expr: (avg_over_time(model{name="prometheus_target_too_many_metrics",monitor_type=""}[10m]) >=bool 1) * 2
        labels:
          severity: warning
          window: 10m
      - alert: prometheus_target_too_many_metrics
        expr: health{name="prometheus_target_too_many_metrics",monitor_type=""} > 0
        annotations:
          summary: "Prometheus target over limit"
          description: "Prometheus target at {{labels.instance}} has too many metrics"
      - record: model
        expr: prometheus_tsdb_reloads_failures{monitor_type=""} >= bool 1
        labels:
          name: prometheus_tsdb_reloads_failures
          threshold: 1
      - record: health
        expr: (avg_over_time(model{name="prometheus_tsdb_reloads_failures",monitor_type=""}[10m]) >=bool 1) * 4
        labels:
          severity: critical
          window: 10m
      - alert: prometheus_tsdb_reloads_failures
        expr: health{name="prometheus_tsdb_reloads_failures",monitor_type=""} > 0
        annotations:
          summary: "Prometheus tsdb reload failing"
          description: "Prometheus had {{$value}} reload failures"
      - record: model
        expr: up{monitor_type=""} != bool 1
        labels:
          name: prometheus_target_down
          threshold: 1
      - record: health
        expr: (avg_over_time(model{name="prometheus_target_down",monitor_type=""}[10m]) >=bool 0.5) * 2
        labels:
          severity: warning
          window: 10m
      - alert: prometheus_target_down
        expr: health{name="prometheus_target_down",monitor_type=""} > 0
        annotations:
          summary: "metrics target down"
          description: "cannot connect to {{$labels.instance}} metrics endpoint for {{$labels.job}} data"
      - record: model
        expr: prometheus_config_last_reload_successful{monitor_type=""} != bool 1
        labels:
          name: prometheus_config_reload_failed
          threshold: 1
      - record: health
        expr: (avg_over_time(model{name="prometheus_config_reload_failed",monitor_type=""}[10m]) >=bool 1) * 4
        labels:
          severity: critical
          window: 10m
      - alert: prometheus_config_reload_failed
        expr: health{name="prometheus_config_reload_failed",monitor_type=""} > 0
        annotations:
          summary: "prometheus bad config"
          description: "current config for prometheus has errors, will prevent restarts"
      - record: model
        expr: prometheus_target_sync_percent{monitor_type=""} > bool 75
        labels:
          name: prometheus_scrape_time
          threshold: 75
      - record: health
        expr: (avg_over_time(model{name="prometheus_scrape_time",monitor_type=""}[10m]) >=bool 1) * 2
        labels:
          severity: warning
          window: 10m
      - alert: prometheus_scrape_time
        expr: health{name="prometheus_scrape_time",monitor_type=""} > 0
        annotations:
          summary: "prometheus has long scrape times"
          description: "prometheus is taking {{$value}}% of the {{$labels.interval}} interval to get {{$labels.scrape_job}} metrics from {{$labels.instance}}"
      - record: model
        expr: abs(akka_actor_processing_time_ns{quantile="0.5",monitor_type="slow_akka"} - avg_over_time(akka_actor_processing_time_ns{quantile="0.5"}[15m])) >bool 2 * clamp_min(stddev_over_time(akka_actor_processing_time_ns{quantile="0.5"}[15m]),10)
        labels:
          name: slow_akka_processing_time
          period: 15m
          sigma: 2
      - record: health
        expr: (avg_over_time(model{name="slow_akka_processing_time",monitor_type="slow_akka"}[15m]) >=bool 0.5) * 2
        labels:
          severity: warning
          window: 15m
      - alert: slow_akka_processing_time
        expr: health{name="slow_akka_processing_time",monitor_type="slow_akka"} > 0
        annotations:
          summary: "actor processing time is weird"
          description: "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has unusual processing time"
      - record: model
        expr: deriv(akka_actor_mailbox_size{quantile="0.5",monitor_type="slow_akka"}[15m]) >bool 0.1
        labels:
          name: slow_akka_inbox_growth
          period: 15m
          minslope: 0.1
      - record: health
        expr: (avg_over_time(model{name="slow_akka_inbox_growth",monitor_type="slow_akka"}[5m]) >=bool 0.5) * 4
        labels:
          severity: critical
          window: 5m
      - alert: slow_akka_inbox_growth
        expr: health{name="slow_akka_inbox_growth",monitor_type="slow_akka"} > 0
        annotations:
          summary: "actor inbox growing"
          description: "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has a growing inbox"
      - record: model
        expr: akka_actor_running_actors{actor="Worker",monitor_type="slow_akka"} < bool 10
        labels:
          name: slow_akka_pool
          threshold: 10
      - record: health
        expr: (avg_over_time(model{name="slow_akka_pool",monitor_type="slow_akka"}[5m]) >=bool 0.5) * 2
        labels:
          severity: warning
          window: 5m
      - alert: slow_akka_pool
        expr: health{name="slow_akka_pool",monitor_type="slow_akka"} > 0
        annotations:
          summary: "worker pool too small"
          description: "actor {{$labels.actor}} in {{$labels.app}} on {{$labels.instance}} has not enough actors"
